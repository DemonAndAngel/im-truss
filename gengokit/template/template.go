// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/cmd/NAME/main.gotemplate (404B)
// NAME-service/config/config.gotemplate (70B)
// NAME-service/handlers/handlers.gotemplate (62B)
// NAME-service/handlers/hooks.gotemplate (62B)
// NAME-service/handlers/middlewares.gotemplate (75B)
// NAME-service/svc/client/grpc/client.gotemplate (3.184kB)
// NAME-service/svc/client/grpc/imclient.gotemplate (1.541kB)
// NAME-service/svc/client/http/client.gotemplate (105B)
// NAME-service/svc/endpoints.gotemplate (4.272kB)
// NAME-service/svc/server/run.gotemplate (3.622kB)
// NAME-service/svc/transport_grpc.gotemplate (3.409kB)
// NAME-service/svc/transport_http.gotemplate (106B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdNameMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x6e\xb3\x30\x1c\xc4\x67\xfe\x4f\x71\x62\x82\xe1\xc3\xfb\xb7\x86\x0e\x59\x9a\x28\x4d\xbb\x56\x0e\x1c\x60\x95\x98\xc8\x36\x44\x11\xf2\xbb\x57\x90\xa8\xcd\xd0\xc9\x67\xdd\x4f\xbe\xf3\x29\x85\xcd\x50\x13\x2d\x2d\x9d\x0e\xac\x71\xba\x21\xb8\xd1\xfb\x02\xe5\x0e\xaf\xbb\x23\x5e\xca\xed\xb1\x10\xa5\x70\xa0\x1b\xad\x35\xb6\xbd\x03\xb8\x9a\xbe\xc7\x30\xd1\x5d\x9d\x09\x44\xe8\x8c\x47\x63\x7a\xae\xf0\x07\x9d\x37\x83\xfd\x8f\x79\x2e\x1e\x3a\xc6\x27\x03\xa5\x0e\x7c\x76\x97\x7b\x8c\x22\x17\x5d\x7d\xe9\x96\x38\x6b\x63\x45\xcc\xf9\x32\xb8\x80\x4c\x92\xb4\xe9\x75\x9b\x4a\x22\x89\x52\x38\x2e\x59\x9b\xc1\x36\xa6\x95\xe4\x13\xe9\x3c\x17\xdb\x95\xdc\xeb\xd0\xe1\x5f\x8c\x50\xd5\xea\xa6\xbf\xf8\x1b\xdd\x64\x2a\x4a\xf2\x17\xed\xa7\x4a\x79\xba\x89\x2e\x95\x5c\xa4\x19\x6d\xb5\x36\xc8\x72\xcc\xeb\x13\xef\x97\x5a\x07\x42\xd7\xb5\xa3\xf7\xf4\x30\x0d\x42\xc7\x1b\x3a\x3d\x11\x27\xd2\xfe\x4c\x11\x68\x97\x15\x97\xbe\x5e\x92\xe5\x28\xf6\xda\x79\x66\xb9\x48\x72\x0f\x29\x0e\xa3\xcd\x1e\xb2\x64\xa3\xc7\x3e\xdc\x7f\x93\x4b\x94\xef\x00\x00\x00\xff\xff\x4b\x56\xe9\x50\x94\x01\x00\x00")

func cmdNameMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMainGotemplate,
		"cmd/NAME/main.gotemplate",
	)
}

func cmdNameMainGotemplate() (*asset, error) {
	bytes, err := cmdNameMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/NAME/main.gotemplate", size: 404, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0xbf, 0xe3, 0x4c, 0x1b, 0x98, 0x86, 0x3b, 0xfd, 0x3e, 0x7f, 0x8a, 0x95, 0x90, 0x8e, 0xe6, 0xbf, 0x9c, 0x13, 0xa9, 0x5e, 0x6d, 0x5, 0x54, 0x3a, 0x33, 0xf7, 0x4d, 0x95, 0x86, 0x3e, 0x1e}}
	return a, nil
}

var _configConfigGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x08\x7c\x2a\x11\xa9\xa1\xf5\x44\xd8\xdd\x37\x27\x07\x3a\x01\x12\xdd\x7d\x7c\x66\x2c\xe8\xa2\x77\x75\xbe\x62\xcf\x0d\xc3\xd8\xf1\xbc\x2d\x3a\x8c\x93\xf6\x52\xe5\x10\xa5\xa2\x83\x92\x66\x50\xe0\xb5\xb6\x3f\x00\x00\xff\xff\x75\x80\x3e\x34\x46\x00\x00\x00")

func configConfigGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_configConfigGotemplate,
		"config/config.gotemplate",
	)
}

func configConfigGotemplate() (*asset, error) {
	bytes, err := configConfigGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.gotemplate", size: 70, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0x9a, 0x74, 0xe4, 0xc9, 0xc4, 0xc9, 0x71, 0x5d, 0xb0, 0x59, 0x68, 0x68, 0x1a, 0x97, 0x40, 0x5a, 0xbf, 0x9d, 0x65, 0x78, 0x80, 0xb1, 0x40, 0xe6, 0xa2, 0x3b, 0x92, 0x20, 0xa4, 0x6b, 0xd7}}
	return a, nil
}

var _handlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\x8c\x03\xef\x57\x73\xc0\x37\x51\x3a\xd5\xe8\xd0\x02\x4a\x3c\xc6\x32\x03\x00\x00\xff\xff\xd6\x21\xab\x2e\x3e\x00\x00\x00")

func handlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHandlersGotemplate,
		"handlers/handlers.gotemplate",
	)
}

func handlersHandlersGotemplate() (*asset, error) {
	bytes, err := handlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/handlers.gotemplate", size: 62, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xcb, 0xd5, 0x72, 0x80, 0xc6, 0xf9, 0x82, 0x4b, 0xe0, 0x8b, 0x90, 0xb8, 0x9b, 0xbc, 0x5d, 0x8d, 0x12, 0xd4, 0x8e, 0x54, 0xf6, 0x72, 0xcb, 0xef, 0xf5, 0x12, 0xd0, 0xe1, 0xb8, 0x41, 0xc8}}
	return a, nil
}

var _handlersHooksGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\x8c\x03\xef\x57\x73\xc0\x37\x51\x3a\xd5\xe8\xd0\x02\x4a\x3c\xc6\x32\x03\x00\x00\xff\xff\xd6\x21\xab\x2e\x3e\x00\x00\x00")

func handlersHooksGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHooksGotemplate,
		"handlers/hooks.gotemplate",
	)
}

func handlersHooksGotemplate() (*asset, error) {
	bytes, err := handlersHooksGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/hooks.gotemplate", size: 62, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xcb, 0xd5, 0x72, 0x80, 0xc6, 0xf9, 0x82, 0x4b, 0xe0, 0x8b, 0x90, 0xb8, 0x9b, 0xbc, 0x5d, 0x8d, 0x12, 0xd4, 0x8e, 0x54, 0xf6, 0x72, 0xcb, 0xef, 0xf5, 0x12, 0xd0, 0xe1, 0xb8, 0x41, 0xc8}}
	return a, nil
}

var _handlersMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0e\x02\x21\x0c\x05\xd0\xbd\xa7\xe8\x9a\x44\x7b\x18\x4f\x40\xec\xb7\x12\x81\x4e\xda\x4e\x66\x41\xb8\xfb\xbc\xb5\xb8\xd0\x1b\x20\xb5\x67\xfa\x19\xc1\x8a\xa9\xf6\x6f\xc9\xbf\x3a\xa5\xc3\x83\x13\xe3\xe8\x35\x11\x3c\x9a\x48\xc7\x55\x1d\xf1\x52\xa3\xaf\x39\x7d\x4c\x40\x85\xf7\x7e\xdc\x01\x00\x00\xff\xff\xcf\x9e\xe9\x81\x4b\x00\x00\x00")

func handlersMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersMiddlewaresGotemplate,
		"handlers/middlewares.gotemplate",
	)
}

func handlersMiddlewaresGotemplate() (*asset, error) {
	bytes, err := handlersMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/middlewares.gotemplate", size: 75, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xfe, 0x9d, 0x1a, 0xaf, 0x47, 0xe8, 0x97, 0x82, 0x24, 0x50, 0x17, 0xb4, 0x49, 0x73, 0x3b, 0x68, 0xb7, 0xe5, 0x3a, 0x3d, 0xb6, 0x15, 0x9d, 0xb1, 0x8f, 0xc4, 0x27, 0xaf, 0xa7, 0x3c, 0xc1}}
	return a, nil
}

var _svcClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\xd6\x08\x16\x52\xa0\xd0\xf7\x2c\x7c\xa9\xd3\x2d\xba\xd8\xa6\x46\x1a\x74\x0f\x45\x51\x30\xd4\x58\x26\x2c\x93\x2a\x49\x3b\x31\x04\xfd\xf7\xc5\x90\x94\x23\x27\x8e\xdb\x43\x10\x8b\xf3\x38\x1f\xef\x0d\x39\x9c\x4e\x61\x6e\x2a\x84\x1a\x35\x5a\xe1\xb1\x82\x87\x3d\x78\xbb\x75\x8e\xc3\xcd\x67\xb8\xfd\x7c\x0f\xef\x6f\x3e\xde\x73\x36\x9d\xc2\x1d\xda\xad\xd6\x4a\xd7\x11\x00\x8f\xaa\x69\xc0\xec\xd0\x3e\x5a\xe5\x11\xfc\x4a\x39\x58\xaa\x06\x03\xf8\x2b\x5a\xa7\x8c\xbe\x86\xae\xe3\xe9\x77\xdf\x8f\x0c\x70\x23\x3c\x8e\xad\xf4\xdd\xf7\x8c\x20\x0b\x21\xd7\xa2\x46\xa8\x6d\x2b\xa1\xb5\x66\xa7\x2a\x74\x20\xa0\xbe\x5b\xcc\x41\x36\x0a\xb5\x87\xa5\xb1\xe0\x57\x48\x0e\xbe\xa0\xdd\x29\x89\xfc\x56\x6c\xb0\xef\xc1\xa5\x4f\xd6\x8e\xdc\x30\xa6\x36\xad\xb1\x1e\x72\x96\x4d\xa4\xd1\x1e\x9f\xfc\x84\x65\x93\xda\x98\xba\x41\x5e\x9b\x46\xe8\x9a\x1b\x5b\x4f\x09\xfd\xb6\x65\xba\x41\x2f\x2a\xe1\x45\x80\x28\xbf\xda\x3e\x70\x69\x36\xd3\x76\x5d\x4f\xd1\x5a\x63\xdd\x84\x1d\x5b\x6a\x73\xb5\x56\x7e\x4a\x7f\xa8\xab\xd6\x28\x4d\x81\xc9\x97\xb7\x42\xbb\x90\xd4\x1b\xf8\x03\x20\x25\xc5\xb2\xe9\x14\xee\x89\xe6\x54\x32\xcb\x26\x5d\xc7\x3f\x86\xca\x16\xc2\xaf\xe0\xaa\xef\x61\xea\x76\x54\x40\xfb\x00\x64\x5c\xbc\x3b\x36\x4f\x58\x11\x38\xbe\xc5\x47\xb0\xe8\xb7\x56\x3b\x10\x7a\x20\x0d\x1e\x84\x5c\xc7\x26\x38\xa6\x5b\x1a\xad\x51\x7a\x65\x34\x87\x8f\x1e\x94\x23\xf2\xc9\x8f\x45\xd7\x1a\xed\xd4\x83\x6a\x94\xdf\x83\x59\x06\x55\xa4\x68\x1a\xb4\xe0\x0d\x54\x4a\x34\x25\x08\x5d\x41\x23\x3c\x5a\x90\x8d\x71\x58\x46\xd0\xb3\x4f\xb6\xdc\x6a\x49\x39\xe5\xb4\x08\x97\x54\x2f\x9f\x87\xd0\x73\xa3\x75\x09\xa6\x25\x9c\x03\xce\xd3\xf2\xe7\xb0\x50\x40\xde\x3e\xf0\x57\x3d\x40\x5f\x68\x4b\x08\x8a\x14\xd0\xb1\x6c\x27\x2c\x48\x99\xaa\x99\x1b\xbd\x54\x35\x63\x19\x35\xd1\x8f\x12\x96\x70\x3d\x03\x2b\x74\x8d\x87\x38\x1d\xcb\x32\xb4\x96\x0c\xcb\xfc\x4f\x29\x0b\x96\x65\x6a\x49\x0e\xe1\x8f\x19\x68\xd5\x04\x44\x16\x19\xa4\xef\x14\xcc\xf1\xff\xac\x68\x73\xb4\xb6\x84\x89\x14\x5a\x1b\x0f\xa2\x6d\x9b\x7d\xf2\x3c\x21\x47\x3d\xcb\x7a\xc6\x32\x39\x2a\xc4\x51\xa4\x6f\xdf\x8f\xda\xe2\xa8\x52\x0a\x77\xca\xfa\x0e\x97\xc6\x62\x4e\xc9\xa4\xb6\xfe\x2a\x9a\x2d\xba\x7b\xf3\xe1\x6e\x31\xff\x94\xba\x35\x97\x92\xaf\x50\x54\x68\x5d\x51\x94\x14\x3e\xeb\xba\x2b\x78\x54\x7e\x05\x17\x1e\x29\x38\xef\x7b\x96\x8d\x56\xdb\x75\x4d\x64\x92\xe9\xc2\x23\x4f\x67\x32\xf2\x4b\xd1\x08\x19\x39\xbb\x50\x03\x68\x50\xe1\x13\xfa\x95\xa9\x5c\x04\x06\xee\xbb\xee\xde\xfc\x6b\x1e\xd1\xc2\x85\x4a\x22\xbd\x4f\xa7\x01\x86\x63\xc1\x87\x95\xb0\x2b\xf0\x4b\x61\xde\xde\x38\x83\x63\x46\x6e\xf1\x31\x92\x92\xc7\xbd\xc4\x88\x2e\xd3\xef\x49\xd7\x0d\x35\xf5\x3d\xef\xba\x71\xbe\x71\x71\x32\x86\xaa\x97\x8b\xef\xb5\x34\x15\x12\xa9\x23\xeb\x1d\xfe\xdc\xa2\xf3\x03\xe6\x06\x4f\x62\xc2\x09\xc1\x01\x14\x1a\xf6\x83\x09\xe4\x5e\x28\x3e\x98\xef\xf7\xed\x90\x48\xd7\x0f\xd8\xa3\x16\xe1\x9c\xa7\xf5\xe2\x40\x55\x5e\x84\x95\xa4\x08\xea\x2a\xa9\x98\x7e\x0d\x3f\xd8\xd0\xa9\x6e\x27\x0f\x7b\x5d\x47\x80\xb1\x86\x2f\x05\xa4\x0b\x23\xb8\x7b\xc5\xfd\x35\x00\x9c\x13\xb5\x7c\x8e\x9d\xf5\x25\x1d\x10\x16\xef\x76\x22\x07\xa2\x4a\x10\xe9\x62\xe7\x73\x88\x53\xe3\x2c\xb3\x74\x1d\x09\x38\xbe\x2d\x79\xdc\x31\x40\xfe\xa6\xfb\xc5\xaf\x44\xb8\xc9\x76\x68\xbd\x03\x41\x7e\xc3\x1d\x77\xa2\x0e\xb0\x48\x87\xd6\x1b\x10\xb0\x75\x68\xaf\x2a\xb3\x11\x4a\xbf\x01\x8d\x31\x38\x2c\xac\xda\x08\xab\x9a\x3d\xed\x59\x6e\x1b\x50\x1a\x44\xba\x74\xd2\x1d\x77\xb6\x90\xfc\x07\xa4\x43\xcc\xe7\xf1\x7f\x19\x5a\xfc\x2e\x24\xa3\xb4\x47\xbb\x14\x12\xbb\xbe\x80\x7c\xf4\x35\xbe\xe8\x62\xde\xd7\xb3\xe7\x7d\x3c\xbf\xfc\x75\xcb\x15\x87\x0e\x09\x0e\x06\xc5\x0e\xfd\xf3\x42\xb9\x78\x18\x7e\x4b\xb9\x73\xe7\xe6\xa4\x70\x71\x43\x42\xbc\xa5\xdb\xaf\x35\x89\x01\x82\x80\x67\x44\x0e\xa8\xdf\x12\xee\x5c\x1d\xa7\x74\x1b\x32\xf8\x4d\xd5\x7e\x86\x19\x94\xf2\x39\xa1\x58\x30\xbc\x21\xd8\xcf\x57\x72\x31\xbf\x6f\xf1\x68\xda\x81\xf3\x76\x2b\x3d\x05\x4b\x83\x00\xbe\x7d\x77\xde\x2a\x5d\xa7\x93\x39\x9e\x36\x51\x18\xaa\x3b\x7c\x05\x01\x36\xa6\x52\x4b\x85\x2e\xce\xee\xc3\xb3\x80\x26\x69\x88\x76\xb4\x9f\xb6\xe6\x97\xe3\x04\x8a\x58\x2e\x8b\x6c\xce\xfd\xd3\x30\xa7\xbe\xa0\xae\xf2\x35\xee\xc3\x70\x8f\x19\x15\xc7\xce\xba\x43\xad\xc1\xad\x81\x53\x8e\xc3\x40\x36\xc3\x94\x83\x19\x90\x4b\x36\x1e\xd1\x34\xf6\xfa\x14\xff\xdc\xac\x0c\xb9\x0c\xe4\x14\x70\x6a\xea\x8e\xbb\xf3\x45\x76\xd2\x3f\xbd\x6e\x86\x4d\x05\x97\xc3\xcb\x91\x7f\xba\x29\x5e\x22\x42\xf2\x34\x27\x5b\xa1\xc6\xca\x64\xc3\x13\x65\xfd\xfc\x44\x09\xe9\x85\xe9\xa8\x96\xb0\x2b\xc1\x04\x9b\xf4\x4f\x3c\x54\x93\xaf\x0b\x9e\xa7\xdc\xff\x22\x63\x1c\xa4\xd1\xf1\x8c\x1e\x23\xc4\x77\xf8\x2c\x61\x5d\xc2\x2e\x4c\x90\x3e\x3c\x4b\xe2\x23\x27\x42\xc7\xcf\x9c\xcb\x4d\x05\x33\x38\x14\xf0\x8f\x51\x3a\xbf\xdc\x54\xe5\xf3\xd2\x82\xf6\x44\xaf\x9c\xf3\xa2\x18\xdc\x25\x66\xa4\x7f\x8a\xec\xff\x1f\x00\x00\xff\xff\x00\xce\x0e\xa6\x70\x0c\x00\x00")

func svcClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcClientGotemplate,
		"svc/client/grpc/client.gotemplate",
	)
}

func svcClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/client.gotemplate", size: 3184, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0x72, 0x1f, 0xe5, 0x3a, 0x45, 0x1, 0x91, 0xd8, 0x5b, 0xa8, 0x47, 0x45, 0x45, 0x98, 0xee, 0x0, 0xf5, 0xc1, 0x3c, 0x43, 0xf0, 0x86, 0x3c, 0xec, 0xbe, 0x2d, 0x84, 0xed, 0x1a, 0x17, 0x6c}}
	return a, nil
}

var _svcClientGrpcImclientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x41\x6f\xe3\x44\x14\x3e\x7b\x7e\xc5\xc3\xea\xc1\x5e\x25\xe3\x4a\xc0\xa5\x52\x0e\xbb\x49\xa9\x82\x96\x6e\x94\xa6\xcb\xb1\xeb\xd8\x2f\xf6\x08\x67\x9e\xfb\x3c\x69\x5a\x59\x3e\x21\xc4\x9e\x96\x03\x82\x3d\xc1\x4a\xa0\x1e\x11\x2b\x21\xad\x40\x08\xf1\x6b\x12\xca\xbf\x40\x63\x3b\x95\xb7\xed\x05\x29\x91\x67\xe6\x7d\xf3\xcd\x7b\xdf\xfb\x66\x82\x00\x86\x14\x23\x24\xa8\x91\x43\x83\x31\xcc\xaf\xc0\xf0\xaa\x28\x24\x8c\x9e\xc1\xf1\xb3\x19\x1c\x8e\xc6\x33\x29\x82\x00\xa6\xc8\x2b\xad\x95\x4e\x1a\x00\xac\x55\x96\x01\x5d\x20\xaf\x59\x19\x04\x93\xaa\x02\x16\x2a\xc3\x1a\xfc\x1c\xb9\x50\xa4\x0f\xa0\x2c\x65\x3b\xae\xaa\x4e\x00\x46\xa1\xc1\x6e\xd4\xce\xab\x4a\x58\xc8\x24\x8c\xbe\x08\x13\x84\x84\xf3\x08\x72\xa6\x0b\x15\x63\x01\x21\x24\xd3\xc9\x10\xa2\x4c\xa1\x36\xb0\x20\x06\x93\xa2\x25\x38\x41\xbe\x50\x11\xca\xe3\x70\x89\x55\x05\x45\x3b\x15\x79\x87\x46\x08\xb5\xcc\x89\x0d\x78\xc2\x71\x23\xd2\x06\x2f\x8d\x2b\x1c\x37\x21\x4a\x32\x94\x09\x65\xa1\x4e\x24\x71\x12\x58\xb4\x2b\x9c\x7c\x0e\x6e\x42\xfd\x88\x96\x4b\xd2\x41\xcb\x59\x04\x65\x29\x27\x4f\xc6\x35\xd5\x24\x34\x29\xf4\xab\x2a\x98\x3c\xa9\x99\x94\x49\x57\x73\x19\xd1\x32\xa0\x1c\xb5\xe1\x30\x52\x3a\xe9\x8e\xfb\x09\x35\x47\xee\x58\x0d\x51\x56\x04\x6d\xf4\xa1\x50\x8a\x59\x8e\x5c\xd8\x90\x51\x4b\x74\x85\x2f\x44\x44\xba\xa8\xcb\x18\x1d\x7e\xf2\xf8\xf4\xe9\xec\xac\x2c\x67\x74\x9a\xe7\xc8\x70\x47\x89\xb3\x93\xc3\xe9\xf3\xf1\xf0\xf0\xec\xf1\x68\x34\x85\x01\xbc\xb0\xc9\x37\x9a\x34\x80\x7e\x5b\xd6\xc1\xc7\xfb\x1f\xed\xbf\x10\xbe\x28\xcb\x3e\xac\x95\x49\x61\xcf\x20\x1c\x0c\x40\x56\x55\xbd\xc6\xa1\x4e\x10\xf6\x54\xbd\xb6\x3b\xe4\x33\x34\x29\xc5\x45\x55\x89\xc5\x4a\x47\x50\x96\x7b\xaa\x3d\xd8\x0b\xe3\x98\xa1\x30\xac\x74\xd2\x83\xc8\x5c\x42\xab\xb8\x1c\x36\xdf\x1e\x30\x9e\xaf\xb0\x30\xe3\xf8\x16\xc6\x78\x0e\x8f\xf2\xb9\x2c\xcb\x23\xb2\x34\xb0\xa7\xe4\xb4\x41\xcd\xae\xf2\x5d\x4d\x3e\x78\x8c\x45\xfe\x00\xb2\xc8\x49\x17\xd8\x81\xf6\x00\x99\xed\x9f\xd8\x87\x52\x38\x91\xb9\xec\x41\x14\xea\x08\x33\x5b\xc7\x2e\xa5\xcf\x95\x49\x67\x6a\x89\xb4\x32\x5e\x0d\xf9\x70\x1f\x1e\x81\x95\x5b\x9e\x60\x44\x3a\xf6\x85\x13\xe3\x02\xb9\xdd\xeb\xf9\xc2\x51\x0b\xa8\x4b\x1c\x0c\xc0\x75\x2d\xb7\xd3\x4c\xa1\x6d\x98\x3c\x42\x33\x24\xbd\x50\xc9\x8c\x4e\xea\xfa\x3c\x77\x67\x21\x69\xfb\xf5\x94\xd6\xc8\x56\xe5\x3b\x2d\x93\x96\xc7\xed\x81\x7b\xbf\xb9\xf7\xc1\xef\xf5\xd7\xf5\x85\xf3\x40\x5e\xbb\xc4\xfe\x37\x9f\x70\x9c\x4a\xd8\x9f\xb5\x27\xb2\x55\xac\x63\x65\x79\x94\xd1\x3c\xcc\x66\x75\xcc\xf3\x21\x08\x40\x53\x9f\x72\xe1\x44\xa4\x75\xa3\xfc\xc1\xa0\xbe\x79\x72\xa4\xc2\xac\xed\x7b\x23\xb0\x4d\xa9\xd7\xc4\xac\xf8\x63\x5d\x60\xb4\x62\xf4\xfc\x1e\x08\xe7\x76\x79\x98\x86\x4a\x9f\xea\x90\xaf\xc6\xda\x20\x47\x98\x1b\x62\x6f\x77\xfe\xb0\x7e\x05\x3e\x0d\x31\x41\xbe\x1b\x47\xee\x81\xdb\xb1\x63\x83\x75\xfd\x1e\xbc\xbf\x7b\xba\xf3\x60\x97\xe0\xd6\x98\xbe\xdf\x34\xda\x96\xf2\xc1\x00\xb4\xca\x6a\x41\x19\xcd\x8a\x75\xad\x4c\x10\xc0\xe6\xeb\xbf\xb6\xdf\xbd\xfd\xe7\xcf\x6f\xb7\x3f\xbc\xd9\xbe\x7e\xb7\xf9\xea\xb7\x7f\x5f\xff\x72\xf3\xf7\x8f\xdb\x57\xd7\xb7\xae\x21\xad\xe5\x30\xa3\x02\xad\x73\x82\x00\x6e\xde\x7e\xb9\x7d\x75\xbd\xf9\xe6\xe7\xed\x9b\xeb\x9b\x5f\x7f\xda\xbc\x7c\xb7\x79\xf9\xfb\xf6\xfb\x3f\x84\xd3\x3e\x6d\x07\x03\xc8\xe7\xf2\x18\xd7\x65\x79\xbf\x49\x4d\xea\x9e\x65\xf5\x85\x63\xef\x42\xa3\xf6\xa0\x7d\x18\x65\xf7\x1e\xd6\x72\x33\x9e\xd7\xc8\x3a\xef\xe6\x3e\xa3\x8e\xab\xce\xe8\xbf\x00\x00\x00\xff\xff\x62\xbf\x37\x4f\x05\x06\x00\x00")

func svcClientGrpcImclientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcImclientGotemplate,
		"svc/client/grpc/imclient.gotemplate",
	)
}

func svcClientGrpcImclientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcImclientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/imclient.gotemplate", size: 1541, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0xdf, 0x4a, 0x4f, 0x8e, 0x9e, 0x8b, 0xa4, 0x2e, 0xf0, 0x15, 0x70, 0x35, 0xa0, 0xb1, 0x29, 0xd7, 0x41, 0x78, 0xda, 0xd3, 0x49, 0x89, 0xdd, 0xbc, 0x34, 0x75, 0x61, 0x45, 0x66, 0x84, 0x0}}
	return a, nil
}

var _svcClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x10\x34\x29\x91\xc8\x02\x56\xf8\x98\x88\xc3\x67\x9d\x3f\x95\xe5\xdd\x69\x18\xe0\x8d\xa1\xab\xdc\x01\x29\x7e\x61\x7c\x7b\xd7\x82\x5a\xfc\x7d\x52\x5f\x64\x63\xe4\xda\x9b\x07\x95\xf8\x34\xcb\x44\x2a\x2e\x4f\x0f\x39\xfc\x01\x59\x75\xce\x65\x8c\x23\x9b\x49\xda\xf6\xfd\xb6\xc1\x1a\x22\x5d\xed\x44\xe5\xfe\x27\x92\xe6\x5c\x7e\x01\x00\x00\xff\xff\x0b\x3c\x4c\x9e\x69\x00\x00\x00")

func svcClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientHttpClientGotemplate,
		"svc/client/http/client.gotemplate",
	)
}

func svcClientHttpClientGotemplate() (*asset, error) {
	bytes, err := svcClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/http/client.gotemplate", size: 105, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xf0, 0x36, 0xf9, 0x16, 0xea, 0x9d, 0x4e, 0x73, 0x64, 0xc5, 0xad, 0xb3, 0x1b, 0x4, 0xe, 0xd8, 0xc8, 0x1e, 0xf7, 0x7a, 0x39, 0x40, 0x4c, 0xb2, 0x12, 0x83, 0x35, 0xca, 0x82, 0x6f, 0xd0}}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x6f\xdc\x38\x12\x3d\x4b\xbf\xa2\x22\x78\xe1\xee\x40\xa6\xef\x0e\x7c\xd8\x4d\xbc\xbb\x06\x36\x1f\x88\xbd\xbb\x87\x20\x08\xd8\x52\xa9\x45\x98\x22\x19\x92\xea\x76\x8f\xa0\xff\x3e\x28\x52\x52\xab\xd3\x4a\x26\x33\xc7\xc1\x1c\x0c\xdb\xfc\x78\x7c\xf5\xaa\xea\x91\xba\xbe\x86\xd7\xba\x44\xd8\xa2\x42\xcb\x3d\x96\xb0\x39\x80\xb7\xad\x73\x0c\xde\xbc\x87\x77\xef\x1f\xe1\xee\xcd\xfd\x23\x4b\xaf\xaf\xe1\x23\xda\x56\x29\xa1\xb6\x71\x01\xec\x85\x94\xa0\x77\x68\xf7\x56\x78\x04\x5f\x0b\x07\x95\x90\x18\x16\xff\x0f\xad\x13\x5a\xdd\x40\xd7\xb1\xe1\xef\xbe\x9f\x4d\xc0\x1b\xee\x71\x3e\x4b\xff\xf7\x7d\x9a\x1a\x5e\x3c\xf1\x2d\x82\xdb\x15\x29\xad\x7f\x1c\x61\xa1\xd0\xca\x73\xa1\x1c\x34\xe8\x6b\x5d\x3a\xf0\x1a\x1a\xfe\x84\x20\x54\x29\x76\xa2\x6c\xb9\x04\x54\xa5\xd1\x42\x79\x07\x95\xd5\x0d\x38\xb4\x3b\x51\xa0\xcb\x09\xc9\xe2\xd7\x16\x9d\x07\xae\x4a\xb0\xe8\x8c\x56\x0e\xc1\x1f\x0c\x06\x24\x5a\x4a\x41\x68\x87\x47\x94\x1c\xb8\x83\x3d\x4a\x49\xbf\x51\x15\xba\x44\xeb\x08\x80\xf0\x4a\x1c\xfe\xaf\xb4\x1d\x36\x06\xb4\x3c\x0c\x70\x12\xa7\x02\xdd\x5a\x70\xad\x31\xda\x92\xb8\xde\x72\xe5\xe8\x6f\x3a\x4e\x70\x29\x7e\xe1\x5e\x68\x45\x68\x95\xb6\x0d\xf7\x8e\xa5\xa9\x68\xc2\x8a\x55\x9a\x64\x55\xe3\xb3\x34\xc9\x28\x72\x7c\xf6\x59\x9a\x26\xd9\x56\xf8\xba\xdd\xb0\x42\x37\xd7\x5b\x7d\xf5\x24\xfc\x35\xfd\x8c\x8c\x69\x89\xd9\x40\xd6\x75\xec\xc3\x3f\xee\x03\xd0\x07\xee\x6b\xb8\xea\xfb\x2c\x5d\x07\x41\xef\x26\x89\x0a\x2d\x25\x16\xde\x8d\x5c\x7d\x3d\x0b\x1d\x7c\xcd\x3d\x14\xba\x31\x14\x18\x57\xc0\xcb\x72\xd4\x93\xc1\xbd\xbf\x74\x04\xd6\x20\x57\x9e\xe4\xdb\x20\xb4\x0e\x4b\xd2\x89\x43\x8d\xd2\xa0\x05\xe7\x6d\x5b\xf8\x9c\xa6\x87\xa3\x96\x4f\x12\xca\x6b\xe0\x04\xe7\x84\xda\x4a\x04\xc3\x2d\x6f\xd0\xa3\xa5\x52\xa2\xf1\x7b\x05\x3c\x66\xc8\xe6\x20\xfc\xa5\xa3\xc3\xaa\x56\x06\xa5\xab\x56\x15\xa4\xe2\x40\x59\x21\x09\xad\x41\x9b\x50\xd1\xa0\x69\xaf\x41\x7b\x35\x1e\x48\x80\x1b\xee\x84\x63\xf0\x4f\x6d\x01\x9f\x79\x63\x24\xe6\x70\xd0\x2d\x34\x62\x5b\x7b\x30\xdc\x51\x96\x67\x52\x11\xc1\xe9\xa0\x78\x8e\xb1\xba\x6c\x0b\x0c\x32\x70\x05\xb5\xf7\x86\xfd\x9b\xab\x52\x12\xc7\xbd\xf0\x35\x20\x2f\xea\xa1\x58\x61\x35\x9e\xbe\x86\xbd\xb0\x58\x42\x6b\x22\xa8\x33\x58\x88\x4a\x14\x60\xb8\xaf\x19\xac\xee\x03\x3f\xe1\x08\x7f\xc3\x37\xf2\x00\x1c\x1a\xe1\x7c\x2c\x74\x28\xd1\x89\xad\xa2\xad\x42\xed\xf4\x13\x06\x29\x1f\x62\x5a\xa6\xc6\x08\x14\xf1\x34\xd9\x31\x19\x04\x31\x2a\xc9\xd6\x73\x75\x0b\x29\x50\xf9\x53\x75\x67\x89\x3b\xf6\x98\x3c\x50\x27\x46\x38\x2c\x7f\x94\x46\xea\x86\xa8\x95\x20\x85\x1b\x8c\x65\x75\xe4\x2b\x94\x47\x5b\x71\x2a\xa8\xe5\x4c\x10\xd8\x74\xd8\x72\x9f\xb7\x2e\x3a\xd2\xd0\x58\xd7\x21\x0f\xef\x70\xff\x7a\x88\xa7\xd0\xcd\x46\xa8\xa0\x53\x33\x50\x9c\x25\x36\x1f\xdc\xc0\xb7\x56\x81\x08\x95\x4c\x04\x0b\x2e\x25\xda\x58\xcc\x03\x59\x96\x86\x70\xce\x04\xed\xd2\xae\xb3\x5c\x6d\x11\x2e\x04\xdc\xdc\x02\x1b\xd7\xbf\x8d\xc9\xe8\xfb\x34\xe9\xba\x0b\xc1\xde\xf1\x06\xfb\x7e\xdc\x0f\x00\x53\x10\x6c\x1c\x4c\xbb\xee\x8a\x46\xfb\x3e\xed\x4f\x7b\xf5\x27\x0e\xa1\xea\x84\xd5\x8c\xe1\x1a\x66\xe7\xae\x0a\xff\x0c\x83\x8f\xb0\xd7\xf1\x77\x4e\xd5\xf0\xd2\x6c\x58\xd7\xfd\x4b\xd3\x32\xb8\x10\xec\x63\x74\xc9\xc7\x83\xc1\x61\xeb\x1a\x56\xe7\x8b\xa2\x7d\xce\x56\xe5\x80\xd6\x6a\xbb\x86\x2e\x4d\x92\xd1\x5e\xc3\x20\x11\x46\xb6\xa0\x01\x71\x22\x0e\xeb\x34\x49\x44\x15\x96\xbe\xb8\x05\x25\x64\xc0\x48\x86\xac\x28\x21\x03\x4c\x9a\x24\x7d\x3a\x8d\x8e\x27\xb0\x9f\xe1\xb6\xce\x09\x25\x4d\xfa\xb4\xeb\xa2\xbc\x24\xee\x5b\x6a\xa9\xb9\xc2\xa1\x69\x2f\x3c\x06\x85\x63\xde\xe6\xa2\x5f\x78\x5c\xd2\x3d\x0a\x4f\x60\x4b\x21\x3a\x08\xf4\xe6\x7b\xe3\x8a\x87\xd0\x83\xeb\xf3\x22\x38\x09\x9e\xb0\x97\x53\x37\xde\x66\x53\x0f\x75\x94\xa8\xe9\x5e\x9b\x0d\xc7\x24\xcc\xb2\x43\xe8\x5f\x29\xa2\x01\x63\x49\xc3\xb3\x22\x08\xfb\x76\x53\x42\x1d\xfb\xa6\xb8\x02\xa3\xb8\x6a\x21\x97\x4b\xd9\x8c\xf9\x9c\x66\x76\x43\x92\xe2\x70\x50\x3f\xe6\x6a\x9e\xb3\xff\x5b\x6e\xfe\x2e\xe5\xdd\x73\x81\xc6\xc3\xde\x72\xe3\xa2\xcd\x4e\xea\x55\x02\x65\x49\x77\xcc\xd0\x9f\xc7\x86\x0d\xe9\x0d\xfe\xb4\x70\x71\xb2\xb7\xa2\x2c\x25\xee\xb9\x8d\xef\x97\xff\xba\xf1\x45\x43\x77\xb9\x31\xf2\x40\x36\x43\xd6\xe9\x09\xbc\x99\x56\x87\xbb\x01\x77\x68\x0f\x53\x2a\xa9\xad\xc8\x45\xc6\xdb\x92\xf0\xde\x1b\xba\x39\xc8\x3d\xf3\x99\x79\x15\x5c\xd1\xcd\x49\xf7\x0d\x96\xb4\x6d\x73\x00\x45\x39\x88\x37\x2a\x3e\x17\xb2\x2d\xb1\x8c\x8f\x99\x0d\x12\x05\x8a\xd9\x60\xc9\xce\xd4\x58\x1d\x39\xe5\x90\x3d\x78\xee\x5b\x97\xe5\x90\x7d\x10\x6a\x9b\xad\xd3\xd1\x1e\x5e\xce\xfc\xe1\x7b\xfb\x61\x41\x95\xfc\xc8\x86\x31\xe6\xbc\x15\x6a\x1b\xca\x49\xa8\x61\xf8\xe6\x16\x1a\x6e\x3e\xc5\xa9\xcf\x51\xfe\xae\xa7\xf4\x93\xad\xfd\x96\x7d\x25\x49\x36\xab\xa8\xec\x06\x26\x80\x3e\x1f\x20\x62\x19\x24\x7d\x9a\x26\x94\x95\x2f\x44\x29\x94\x71\x80\x9e\xe8\x75\xd1\x4e\xbe\xe4\xa0\x9f\x68\x7a\x24\xf8\x09\x9f\x3f\xbf\x82\x17\xfa\x29\x96\xa4\xe1\x4a\x14\xab\xaa\xf1\xec\xc1\x58\xa1\x7c\xb5\xca\xee\x46\x88\x29\x93\x97\x7f\x73\x97\x50\x6a\x74\xa0\xb4\x07\x7c\x16\xce\xbf\x02\x87\x38\x2f\x80\xa9\x86\x1c\xdb\xea\x8c\x48\xad\xd7\x83\x59\x95\x28\xd1\xe3\x6a\x64\x10\xe6\x8e\x01\x08\x55\xe4\xf0\xe5\x18\xc1\xa4\xe4\xcf\x6b\x26\x2a\xda\x05\xb7\xb7\x70\xa2\xde\xd0\x74\x8b\xae\x0b\xb7\x33\xf2\xab\xc5\x25\xeb\xb1\x0b\x4f\x54\x8f\x1d\xf8\x1f\xbe\x41\x89\xe5\xb1\x30\xe2\x77\xc0\x16\xfd\x58\xc6\xf3\xc7\x5d\xac\xe6\x7d\x8d\x6a\x9a\xd5\xb3\xca\x1d\xc0\x62\x01\xe6\xb1\xe1\x86\x9e\x68\xe3\x62\x88\x1f\x17\x3c\x7e\xa1\x88\x82\xde\x38\x56\x14\xf1\xf1\x39\xe3\x50\x8b\xa2\x0e\x5b\x1d\xaa\x25\x0a\xc3\xc5\x3e\xec\x1e\x9f\x35\xda\x0e\xd7\xfa\x79\x54\xc1\x79\x63\x2d\xe7\xe7\x26\xbd\xe0\xdb\xe9\xf7\xe2\xfa\xc3\x36\x75\x46\x2a\x1f\xe2\x0c\x8a\x5b\x2c\x50\xec\xe2\x03\x30\x84\xf8\xcd\xbb\x9a\xc1\x03\xe2\x04\x33\x43\x09\x13\xe3\xbb\x74\xb2\x00\x22\x4a\x45\x59\xa2\xe7\x42\x86\x37\xe4\xd8\x51\xe1\xf3\x64\x78\xfb\x72\x29\xfc\x81\xfd\xc8\x4d\x4e\x62\x9f\x9b\xca\xef\x56\xf4\x2f\xcb\xf9\x53\x5a\xce\xc9\xb6\x7c\xf9\x69\xf8\x3d\x07\xfa\x35\x00\x00\xff\xff\x9a\x16\xde\x59\xb0\x10\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 4272, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0x30, 0x93, 0xa5, 0x9f, 0x65, 0x43, 0xe2, 0x5b, 0x4b, 0xe, 0x33, 0x90, 0xa8, 0x3b, 0x7b, 0x3f, 0xbe, 0xbc, 0x3f, 0x60, 0x73, 0x30, 0x1, 0x4, 0x4c, 0x5f, 0x3d, 0x95, 0x45, 0x5f, 0x38}}
	return a, nil
}

var _svcServerRunGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4f\x8f\xd3\x46\x14\x3f\xdb\x9f\xe2\x61\x51\xe4\xb4\x59\x9b\x8a\xd2\x43\x4a\x0e\xb0\x09\xb0\x12\xbb\x44\x49\x80\x4a\x55\x85\x66\xed\x67\x67\x84\x3d\xe3\xce\x8c\x13\x56\x56\x0e\xed\x11\xa9\x52\x3f\x40\x2f\xdc\x7a\xe3\xca\xa1\x52\xbf\x4c\x97\xcf\x51\xbd\xb1\x9d\xb5\x81\xa4\xd0\xee\x61\xed\xcc\xfb\xcd\xef\xfd\x7f\xcf\x61\x08\xc7\x32\x46\x48\x51\xa0\x62\x06\x63\x38\xbf\x00\xa3\x4a\xad\x03\x98\x3c\x86\xb3\xc7\x4b\x98\x4e\x4e\x96\x81\x1b\x86\x30\x47\x55\x0a\xc1\x45\x5a\x03\x60\xc3\xb3\x0c\xe4\x1a\xd5\x46\x71\x83\x60\x56\x5c\x43\xc2\x33\xb4\xe0\xa7\xa8\x34\x97\x62\x04\x55\x15\x34\xef\xdb\x6d\x47\x00\x13\x66\xb0\x2b\xa5\xdf\xdb\xad\xeb\x16\x2c\x7a\xc1\x52\x04\x8d\x6a\x8d\xca\x75\x79\x5e\x48\x65\xc0\x77\x1d\x2f\xc9\x58\xea\xd1\x33\x37\xf4\x48\xe5\x51\x24\xf3\x5c\x8a\xd0\x48\x99\xe9\x30\x93\x69\x8a\x8a\x24\x86\xe7\x48\x4f\x81\xa6\x79\x84\x2b\x63\x8a\xee\x7b\x58\x14\x4a\x26\x74\x22\xb5\xe7\xba\x4e\x18\xc2\xad\x18\x66\x4c\x99\x0b\x4b\x2d\xd3\x0c\x83\x54\x66\x4c\xa4\x81\x54\x69\x98\xaa\x22\x6a\x70\x4b\x72\x74\x81\x6a\xcd\x23\x74\x9d\xe2\x1c\xbc\xaa\x0a\x66\xf7\x4e\xac\xa1\x33\x66\x56\x70\xb4\xdd\x12\x73\x55\x05\xfd\x43\x08\xf5\x3a\xda\x23\x59\x31\x11\x67\xa8\xb4\xe7\x0e\x5c\x77\xcd\x14\x4c\x30\x61\x65\x66\x8e\xa5\x48\x78\x0a\xf5\xc3\x75\x93\x52\x44\xc0\x05\x37\xfe\x00\x2a\xd7\xa1\x90\x04\x0b\xa3\xb8\x48\x9f\x32\xe5\xdf\xe8\x5d\x0a\x26\x78\x5e\xa6\x77\xe3\x58\x0d\xc1\x8b\xe9\x3d\x60\x71\xac\xbc\x21\x78\xa3\xdb\x37\xbf\xbd\x49\x2f\x16\x02\x4c\xc4\x90\xa3\x51\x3c\xd2\x90\x71\x6d\x50\x00\x21\x51\x6b\x6f\xf0\x6f\x4a\x1e\x2e\x97\xb3\x46\x07\x05\xb6\xab\xe2\xb6\x55\x41\x80\xcf\x66\x7d\x30\x9f\x1d\x37\xac\x14\xfa\x2e\xeb\x37\x96\x35\x9d\xcf\x8e\xc1\x27\xee\xc1\x87\xe4\x36\x4f\x4f\x34\x02\x8a\x35\x57\x52\xe4\x28\x0c\xac\x99\xe2\xec\x3c\x43\x3d\x04\x9e\x80\x46\x13\xc0\xfd\x8c\xa5\x1a\x56\x6c\x8d\x50\x28\x2e\x15\x37\x17\xb6\xa2\x61\x2a\xd6\x84\xd7\x81\xeb\xf0\xc4\x12\xc3\x68\x0c\x52\x07\x0f\xd0\xa0\x58\xfb\xde\x64\x7a\xef\xc9\x83\xe7\x77\x27\x93\xb9\x37\xf8\xae\x06\x5c\x1b\x83\xe7\x51\x52\x9c\x3d\x59\x80\xb1\x05\xba\xce\xd6\xb2\xda\xba\xee\xb3\xce\x1e\xcf\x97\xc4\x67\x45\xfb\xf8\xda\x80\xc3\x18\x92\xdc\x04\x8b\x42\x71\x61\x12\xdf\x1b\x7d\xa1\xbd\xa1\xbd\x3a\x68\x55\x7c\xc4\x70\xba\xfd\x69\x76\x77\xf4\x74\xcd\xfe\x08\x27\x25\xeb\xd3\x38\xdb\xb4\x76\x38\xb7\xae\x6b\xa7\x90\x2d\xf3\x48\x0a\xc3\xb8\xd0\x60\x56\x08\x0a\x7f\x2a\xb9\xc2\x18\x12\x8e\x59\xac\x21\x91\x0a\xda\x11\xc4\xda\x01\x61\x2e\x0a\x6c\x6f\x6b\xa3\xca\xc8\x90\xda\x9d\xed\xda\x16\x98\xeb\x5c\x25\xa1\x3d\xd9\x99\xd2\x1c\x6c\x9b\xe6\x3a\xc3\xcd\x54\xc4\x85\xe4\xc2\x68\x7f\x00\x7a\x1d\x05\xbb\xdf\x44\x1d\x86\x70\xaf\xd4\x5c\xa0\xd6\x10\xcb\x9c\x71\x11\xb8\x0e\x35\xac\xae\x47\x02\x14\xe7\x41\x55\x05\xcd\x80\x08\xce\x58\x8e\xdb\xed\xa2\x36\xd6\xa1\x88\xb4\xb8\x31\xb4\x3d\x1f\x9c\xe1\xa6\xc1\xfb\x03\xd7\x21\x15\xcf\x14\x2b\xda\x21\x03\x1b\x6e\x56\x90\xf3\x38\xce\x70\xc3\x14\xea\x00\x16\x88\xbb\xdb\x61\x57\x92\xca\x8f\x6b\x20\xbe\x56\x45\x23\xb6\x55\x62\xfd\x69\xfd\xeb\xfb\xe3\xbb\x4e\x55\x29\x26\x52\x84\xeb\x9c\x32\xbe\xf3\xe9\x14\xcd\x4a\xc6\x9a\x06\x97\xeb\x38\x55\xb5\x94\x8f\xe4\x06\x15\x5c\xe7\x8d\xbb\x3b\xc2\xb1\x8d\xdf\x29\x7b\x81\x55\xf5\x81\xb4\x63\x48\x55\xa1\x88\x89\x8d\x7a\x17\x77\xe1\x1e\x8d\xfb\xf1\xaf\x3e\xd9\xa4\x0f\x94\x8d\x00\x00\x0e\x98\x3a\xec\x18\xd1\x84\xc5\xe6\x40\x63\x86\x11\x2d\xc6\xab\x22\xf8\xcc\x74\x5c\xb9\xf3\x5e\x3e\xae\xca\x6c\x07\x21\xf7\x15\x9a\x52\x09\xd8\x9d\x35\x1d\x32\x2f\x05\x68\xc3\x94\xd1\xc0\x40\xe0\x06\x68\xda\x36\x5d\x30\x04\x3b\x0e\xdb\x1f\x34\xce\x19\xd8\x89\xdf\x9c\xd5\x36\x9b\x15\x12\x53\xc1\xb4\xc6\x98\x7a\x8d\x9a\x86\xc0\xf5\xea\xac\xeb\x7f\x5e\x0a\x3f\x4a\xda\x8d\x63\xb7\x4c\x2f\x21\xfd\xfe\xa8\x23\x75\x8a\xd1\x8a\x09\x1e\xb1\xec\xaa\x84\x50\xa9\x88\xf0\x39\x7b\x81\x3e\x89\x01\x95\x92\xaa\xb9\x71\x22\x0c\x2a\x55\x16\xa6\x0d\x49\xe0\x3a\xa9\xbc\x8a\xcf\x4e\xfe\xb0\x3e\xf1\x89\xae\xb9\x5b\xef\xac\x7a\xe8\xb7\x17\xc9\xf4\x7a\x25\x3a\xb5\x33\xc1\x89\x48\xa4\xef\xd5\x8d\x47\x0b\x63\xf1\xe4\xf8\x78\xba\x58\xd0\xeb\xe5\x6f\x6f\x2e\x5f\xfd\x61\xe3\xf3\xee\xf7\x5f\x2f\x5f\xbd\xf6\x86\x90\xb3\xe2\x87\x7a\x12\xfc\x58\x3f\xaa\x7a\x65\xd2\x88\xf0\x46\x10\x25\x9d\x41\xbe\xa5\x26\xcd\xc9\x39\xbb\xf1\x9a\xee\xc5\xd3\xf2\xa5\x6d\xdf\x3c\xa8\x8d\xf6\xbd\xd0\x52\xd4\xdf\x1a\xa1\x37\xac\xe1\x8d\x47\xf7\xc9\x62\x2b\x09\x4e\x44\x8c\x2f\x07\x07\xae\x46\x79\x9c\x71\x81\xfb\x19\x8e\x6b\xc0\x21\x0e\xfa\xc7\xb3\x03\x1c\xb3\x1a\x70\x88\x43\x5f\xe4\xe7\x32\xdb\x4f\xb1\xb0\xf2\x43\x0c\x46\xb1\xe8\x80\x0d\x4b\x12\x0f\x28\xcf\x75\xfd\xdc\x39\xaa\x91\x8f\x6c\xb2\xef\x8a\xd8\x06\xda\xef\x65\x63\x08\x39\x8d\xb2\xb6\x16\xed\xe7\x86\x51\x4c\x68\x5a\x85\xff\xb9\x3a\x48\xed\xa1\xe2\x20\x79\xa7\x36\xda\x85\x63\x4b\x63\xd5\x0e\x2e\x1a\x7c\x24\xd9\x15\xf1\x55\x9f\x3b\x8e\x56\x6b\xc2\xdd\xb0\x0e\xd6\x96\x54\x2e\x74\xfe\x88\xaf\xcf\x3e\xec\xc9\x1b\xd6\x11\xac\xfa\xe7\x73\x64\xf1\x92\xe7\x28\x4b\x33\x82\xaf\x6f\xc2\x97\x40\x1f\xc4\xc1\x02\x23\x29\xe2\x3e\xf4\x19\x7d\xba\xef\xb0\xb7\xf6\x62\xb7\xbb\xb7\x36\x2d\x5a\xad\xdf\xcf\x4a\x37\x0b\x76\x1e\xfd\xff\x2c\xd0\xb7\xdf\xa1\x2c\x90\xbc\x93\x85\x76\xa7\xdb\x2c\x64\x62\x48\xd6\x52\x8c\x05\x9a\xc6\x58\xdf\x33\x51\xe1\x0d\x7b\x68\x02\xf3\xc4\x62\xaf\x8d\x41\xf0\xcc\x9a\xb8\x2b\x40\x54\x8a\x7e\xd6\x63\xd9\x75\xec\x76\x68\x93\xd7\x26\x99\xa8\x6a\x37\xde\xcb\x31\x81\xec\x07\x6c\x3b\x24\x94\x1d\x11\xc5\x79\x30\xc7\x94\x2c\x52\x7b\xbe\x15\x7c\x3d\xa4\x18\xf7\x5a\x41\xd7\x65\xe2\x67\xa2\x1b\xea\x79\x29\xae\xd9\x71\x4b\xba\xee\x1c\x11\xd8\x6d\x03\x3c\xa5\x91\xdb\x8b\xf0\x74\xfe\x74\x3a\x7f\x3e\xfd\xfe\x64\x69\xa3\xfc\xe7\x2f\x97\x6f\xdf\xfe\xfd\xd7\xeb\x77\x3f\xbf\x19\x79\xf0\x15\x39\xdb\x5c\x1a\x0c\x29\x14\x03\xda\x3e\xff\x04\x00\x00\xff\xff\x46\xf7\xb5\x37\x26\x0e\x00\x00")

func svcServerRunGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServerRunGotemplate,
		"svc/server/run.gotemplate",
	)
}

func svcServerRunGotemplate() (*asset, error) {
	bytes, err := svcServerRunGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/server/run.gotemplate", size: 3622, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0x4f, 0xcc, 0x29, 0xdc, 0xd2, 0x4c, 0xde, 0x89, 0x24, 0xb3, 0xfd, 0x8, 0xeb, 0x61, 0xff, 0xf6, 0x71, 0xde, 0x90, 0xcb, 0xaf, 0xde, 0x34, 0xae, 0x8b, 0xff, 0xf7, 0x34, 0x3e, 0x57, 0x59}}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\xcd\x8e\xdb\x36\x10\x3e\x8b\x4f\x31\x35\x82\x42\x0a\x6c\xaa\xbd\x2e\xb0\x97\xec\xa6\x49\xd0\x26\x59\x6c\x8d\xf4\x10\x04\x01\x2d\x8d\x65\xc2\x32\xa9\x25\x69\x6f\x5c\x42\x4f\xd1\x07\xe8\xbd\x97\x1e\xd3\x53\x9f\x27\x7d\x8b\x62\xa8\x1f\x6b\x6d\xaf\xd7\x01\x02\xc8\xe2\xc7\x99\x6f\xe6\xfb\x38\xd4\xa6\x29\x5c\xe9\x1c\xa1\x40\x85\x46\x38\xcc\x61\xb6\x05\x67\xd6\xd6\x72\xb8\x7e\x0f\xef\xde\x4f\xe1\xe5\xf5\x9b\x29\x67\x69\x0a\xb7\x68\xd6\x4a\x49\x55\x34\x00\xb8\x97\x65\x09\x7a\x83\xe6\xde\x48\x87\xe0\x16\xd2\xc2\x5c\x96\x18\xc0\x1f\xd0\x58\xa9\xd5\x05\x78\xcf\xdb\xe7\xba\x1e\x2c\xc0\xb5\x70\x38\x5c\xa5\xdf\x75\xcd\x58\x25\xb2\xa5\x28\x10\xec\x26\x63\x84\x9f\x76\x61\xa1\x32\x7a\x23\x73\xb4\x60\xd1\x6c\xd0\x4c\xac\xcc\x11\x66\x52\xe5\x52\x15\x16\xe6\xda\x80\x5b\x20\x14\xb7\x37\x57\xe0\x8c\x50\xb6\xd2\xc6\x05\x2e\x6f\x1c\xac\x9d\x2c\xe5\xef\x68\x03\xa4\x5f\x4d\x0b\x53\x65\xfc\xd7\x10\x8e\x33\x26\x57\xf4\x12\x62\x16\x8d\x14\xba\x74\xe1\x5c\x35\x62\xd1\x28\xd3\xca\xe1\x17\x37\x62\x2c\x1a\x15\x5a\x17\x25\xf2\x42\x97\x42\x15\x5c\x9b\x22\x84\x48\x57\xe8\x44\x2e\x9c\x20\x0c\xbd\xe8\x33\xc0\xa8\x90\x6e\xb1\x9e\xf1\x4c\xaf\xd2\x42\x4f\x96\xd2\xa5\xf4\xff\x21\x05\xda\xd6\x95\x4a\x6c\x64\x86\x2c\xaa\x66\x30\xf2\x9e\xdf\xbc\x78\x13\x68\xdd\x08\xb7\x80\x49\x5d\x8f\x58\xc4\x22\xef\x27\x20\xe7\x50\x38\x88\x4b\x54\xc0\xdb\x4d\xfc\x2d\xba\x85\xce\x6d\x02\x3f\x42\x5d\x33\x00\x80\x34\x85\xff\xfe\xf8\xf7\xdb\xd7\xbf\xbf\x7d\xfd\xf3\xdb\x3f\x7f\xb1\x68\x29\x9d\x3e\x45\x2b\x93\xaa\x48\x75\x85\xaa\x7d\xa6\x0e\x0c\xc0\x83\x95\xe1\xf3\xa4\xd0\xa3\x86\x16\xaa\xbc\xae\x59\x12\xb4\x7b\x2b\x96\xf8\xea\xf6\xe6\xaa\xe9\x30\xac\xc4\x12\x2d\x08\xb0\xe8\x40\xcf\x09\x59\x69\xa9\x9c\x05\xb1\x11\xb2\x14\xb3\x12\x41\xd0\x7a\x90\xd0\xfb\xbe\xaa\x77\x62\x85\x75\xdd\xc9\x34\x5f\xab\x6c\x2f\x72\xbc\x0b\xf5\xb2\x7b\x1a\x83\xae\x9c\xd4\xca\x02\xe7\xfc\x81\x26\xad\xe0\xef\xc3\x72\x02\xd5\x8c\x3f\x92\x0b\x3c\x8b\xec\x00\x6b\xe1\xe2\x12\x3e\x7e\x7a\x3c\x98\x67\x51\x74\x6c\xf5\x05\xce\xb5\xc1\xb8\x73\xc9\x54\x5f\x35\x96\x4a\xc6\x2c\xaa\xf7\x73\x5c\x82\xa8\x2a\x54\x79\xfc\xe0\x75\x5f\x0e\xe7\x3c\x39\xd7\x00\xd1\x81\xfa\x24\x17\x1a\xaa\x63\x20\x1e\x7f\x55\xea\x99\x28\xa7\x61\x2d\x4e\xc8\x33\x4a\x4f\x74\x35\x14\x34\x32\xe8\xd6\x46\xc1\xf7\x54\x5f\x53\x95\x0f\xf1\xbd\x87\xa9\xfe\x45\xdf\xa3\x81\x07\x4d\x0c\xf9\xbd\x37\x42\x15\x08\xcf\x24\xa5\xdc\x67\x49\x88\xc8\xfb\x6e\xfb\x33\xd9\x76\xff\x02\x1e\x36\xf1\x1d\xde\xb7\x3a\xb3\x28\x8a\x7a\xad\xb9\xf7\xfd\x96\x4e\xf6\x31\x21\xae\x31\xd3\x79\xb0\xc7\x00\x71\x8b\x77\x6b\xb4\x0d\xe0\xa5\x3a\x0a\xb0\x95\x56\x16\x03\xa2\xed\x2f\xde\x75\xac\x60\x74\x43\x87\x21\x54\x15\x3d\x54\x8c\x73\xde\xee\xc1\xd2\x62\x7b\xee\xe8\x5f\x74\x5c\xc8\x13\x0e\x09\x87\x93\x13\xb1\xde\x23\x71\x23\xd9\x98\x86\x41\xcf\x75\x34\x06\x25\xcb\x24\x49\x76\xb9\x83\x50\x0d\x3d\xb2\xd5\x40\xb9\x9a\xd5\xe1\x34\xee\x94\x03\xb9\xaa\x4a\x5c\x21\x1d\x18\x1a\x88\xde\xbf\xd2\xa1\xc8\xe3\xc7\x40\x2a\x87\x66\x2e\x32\x64\x6e\x5b\xe1\x30\x8e\x75\x66\x9d\x39\xf0\xec\x69\xa1\x8f\xe8\x0c\xb0\xd7\x8b\xd7\x42\xe5\x25\x1a\xb6\x23\xdf\x30\x6f\xc3\x84\x19\x3f\xc8\xee\xf4\xae\x90\xf3\x6b\x78\x92\x6a\x18\x30\xb1\x85\xe7\xbb\x54\xc9\x2e\x7c\xcf\x3e\xce\xdc\x17\x68\xef\x06\xde\x8a\x35\x06\x83\x77\xf0\x3c\x8c\x94\x1d\xbe\xb5\xde\x74\x5b\x75\xa4\x12\x88\x0f\x41\x8d\xfd\x06\xa8\x31\xa0\x31\x9a\x92\xb3\xe8\x33\x85\xae\xc2\x1b\xa2\x4d\xe6\x3f\xe8\x67\xe3\x25\x72\x0f\x71\x0b\x5c\x12\x16\x91\x8d\x8d\x81\xef\x2e\xc9\x32\x14\xaa\x3b\xca\x4a\x96\x21\x5e\x98\x41\xed\x3b\x83\x15\x3f\x87\x5a\x12\x0c\xc8\x6a\xe6\x7d\x23\x14\xc9\xd4\xb6\xba\x39\x7e\x4f\xf7\x39\x4d\xe1\xd4\x49\x05\x49\x77\xc1\xde\x5d\xdd\x6c\x68\x11\x3f\x91\x50\x6e\x21\x1c\xc9\xb0\x41\x43\x37\x49\x30\x7a\x73\x7f\x1c\xfa\xcd\xb4\x91\x9d\x06\x01\x6b\x8b\x66\x92\xeb\x95\x90\xea\x14\x98\xc3\x8d\x91\x2b\x61\x64\xb9\xa5\x2d\xf3\x75\x09\x52\x85\x4b\x6c\x70\x1d\x9d\xaa\x23\xfe\x7c\xe8\x12\xaa\xe5\x16\xef\x76\xae\xf4\x64\x89\xc1\xaf\xa1\xf4\x64\xa9\x8b\xcb\x6e\xcf\x31\x79\x0e\xec\x35\xd0\xf3\xee\x84\x52\xcd\x1c\x3c\x4b\xa9\x93\x23\xf3\xa8\x54\xcd\x8e\x0e\xf2\x98\x56\x4f\xab\xd0\xa6\x08\x9a\x9d\x50\xb6\x2a\xb7\x67\x49\x75\xb2\x90\x63\x5a\xf5\x0c\xce\x14\xcb\x56\xd4\xc5\x6e\xd7\x79\xa7\x69\xa0\x97\xad\x8e\x09\xf6\x1a\xcb\x0a\x8d\x65\x4d\x0d\x07\x1f\x12\xc7\x67\xd1\x2a\xef\x91\xfc\xed\x75\xb2\x0f\x20\xba\x34\x51\x97\x63\xd8\x04\xca\xc1\x04\xab\x3c\xcc\x08\x39\x87\xcd\x70\x66\x34\xdf\xa7\x08\x4b\xdc\x06\xb5\xf3\x9c\xfe\x56\xd0\x6e\x41\x2d\xee\xb2\xd0\x80\x5e\x09\x07\xf1\x32\x81\xfb\x85\xcc\x16\x01\x5a\x96\x50\x92\x5c\x6d\x14\xa1\xf2\x70\xe9\xd0\xe7\x35\xbf\x12\x4a\x2b\x99\x89\xf2\x35\x8a\x1c\xcd\xcf\xb8\xa5\x2f\x43\xd7\x26\xb2\xba\xb1\x8c\x74\x90\x09\x05\x33\xec\x42\x64\x19\x5a\x8b\x39\xe5\x46\xe9\x16\x68\xda\xcc\xb4\x4e\xad\xb8\xec\x6b\xfd\x4d\xba\xc5\x07\x51\xae\xb1\x19\x89\x54\xeb\xc7\x1f\x3e\x25\x4f\x02\x1f\x61\x17\x2f\x93\x5d\x84\x70\xb7\xf6\xd2\x65\xee\x0b\xab\xd9\xff\x01\x00\x00\xff\xff\xa7\xb7\xec\x39\x51\x0d\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 3409, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4c, 0xde, 0x22, 0x54, 0xbf, 0x57, 0xce, 0x14, 0x64, 0x1a, 0x4b, 0x24, 0x6f, 0x83, 0x69, 0x4f, 0xf8, 0x2b, 0x8d, 0x99, 0xbe, 0x8a, 0x57, 0xc1, 0x48, 0x3f, 0x37, 0x7e, 0x36, 0x7b, 0xb7, 0x47}}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x1a\x29\x91\xe2\x05\xac\xf0\x31\x08\x93\xb3\xce\x1f\x1a\xeb\x76\xa7\x61\x80\x37\xa7\xae\xb2\x03\x52\xed\x42\xff\x8c\xa1\x15\x67\xb5\xd7\x93\xfa\x20\x3b\xbd\x9c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\xe5\xb0\x1b\x64\xd5\x88\x65\xce\xa3\xb4\x26\x69\xcb\xf9\xba\xa1\x75\x78\xda\xe1\x5f\x78\xfe\x1b\x49\x11\xcb\x2f\x00\x00\xff\xff\xdd\x3a\x4a\x8f\x6a\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 106, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x57, 0x56, 0xc6, 0xb4, 0xe5, 0x1f, 0xf4, 0x1d, 0xa5, 0xda, 0x23, 0xea, 0x8f, 0xfb, 0xff, 0xae, 0x4b, 0x12, 0xe4, 0xf6, 0xbf, 0x11, 0xa6, 0x4, 0x83, 0x53, 0xfd, 0xbf, 0xce, 0x4a, 0x47}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/NAME/main.gotemplate":            cmdNameMainGotemplate,
	"config/config.gotemplate":            configConfigGotemplate,
	"handlers/handlers.gotemplate":        handlersHandlersGotemplate,
	"handlers/hooks.gotemplate":           handlersHooksGotemplate,
	"handlers/middlewares.gotemplate":     handlersMiddlewaresGotemplate,
	"svc/client/grpc/client.gotemplate":   svcClientGrpcClientGotemplate,
	"svc/client/grpc/imclient.gotemplate": svcClientGrpcImclientGotemplate,
	"svc/client/http/client.gotemplate":   svcClientHttpClientGotemplate,
	"svc/endpoints.gotemplate":            svcEndpointsGotemplate,
	"svc/server/run.gotemplate":           svcServerRunGotemplate,
	"svc/transport_grpc.gotemplate":       svcTransport_grpcGotemplate,
	"svc/transport_http.gotemplate":       svcTransport_httpGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"NAME": &bintree{nil, map[string]*bintree{
			"main.gotemplate": &bintree{cmdNameMainGotemplate, map[string]*bintree{}},
		}},
	}},
	"config": &bintree{nil, map[string]*bintree{
		"config.gotemplate": &bintree{configConfigGotemplate, map[string]*bintree{}},
	}},
	"handlers": &bintree{nil, map[string]*bintree{
		"handlers.gotemplate":    &bintree{handlersHandlersGotemplate, map[string]*bintree{}},
		"hooks.gotemplate":       &bintree{handlersHooksGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate": &bintree{handlersMiddlewaresGotemplate, map[string]*bintree{}},
	}},
	"svc": &bintree{nil, map[string]*bintree{
		"client": &bintree{nil, map[string]*bintree{
			"grpc": &bintree{nil, map[string]*bintree{
				"client.gotemplate":   &bintree{svcClientGrpcClientGotemplate, map[string]*bintree{}},
				"imclient.gotemplate": &bintree{svcClientGrpcImclientGotemplate, map[string]*bintree{}},
			}},
			"http": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{svcClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"endpoints.gotemplate": &bintree{svcEndpointsGotemplate, map[string]*bintree{}},
		"server": &bintree{nil, map[string]*bintree{
			"run.gotemplate": &bintree{svcServerRunGotemplate, map[string]*bintree{}},
		}},
		"transport_grpc.gotemplate": &bintree{svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": &bintree{svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
