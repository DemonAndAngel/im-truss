// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

// Package grpc provides a gRPC client for the {{.Service.Name}} service.
package grpc

import (
	"context"
	"google.golang.org/grpc"
	pb "go-common/services/{{.PBImportPath -}}/PB"
	"github.com/opentracing/opentracing-go"
	"go-common/tools/tracing"
	"go-common/tools/helpers"
)

const (
	DEFAULT_{{ToUpper .Service.Name}}_SERVICE_ADDR = `{{.PackageName}}-service:5040`
)
{{- with $te := .}}
{{- range $i := .Service.Methods}}
func {{$i.Name}}(ctx context.Context, requestId string, req *pb.{{GoName $i.RequestType.Name}}) (resp *pb.{{GoName $i.ResponseType.Name}}, err error) {
	addr := helpers.GetConfigToString("services.{{ToLower $te.Service.Name}}.addr", "DEFAULT_{{ToUpper $te.Service.Name}}_SERVICE_ADDR")
	if addr == "" {
		addr = DEFAULT_{{ToUpper $te.Service.Name}}_SERVICE_ADDR
	}
	tracer := opentracing.GlobalTracer() // no-op
	conn, err := grpc.DialContext(ctx, addr, grpc.WithInsecure(), 
	grpc.WithChainUnaryInterceptor(tracing.ClientJaegerInterceptor(tracer, "{{$i.Name}}Client"), tracing.ClientRequestIdInterceptor(requestId)))
	if err != nil {
		return
	}
	// 函数结束时关闭连接
	defer conn.Close()
	// 调接口查询制券方
	client := pb.New{{$te.Service.Name}}Client(conn)
	resp, err = client.{{$i.Name}}(ctx, req)
	return
}
{{- end}}
{{- end}}