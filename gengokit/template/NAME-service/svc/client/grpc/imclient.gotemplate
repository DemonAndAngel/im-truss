// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

// Package grpc provides a gRPC client for the {{.Service.Name}} service.
package grpc

import (
	"context"
	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"
	grpctransport "github.com/go-kit/kit/transport/grpc"
)

// 端点结构体
type Endpoints struct {
	{{- range $i := .Service.Methods}}
	{{- if ne $i.Name "Ping" }}
	{{$i.Name}}Endpoint endpoint.Endpoint
	{{- end }}
	{{- end}}
}

// 创建客户端实例
func NewClient(conn *grpc.ClientConn, options ...grpctransport.ClientOption) (Endpoints) {
	return Endpoints{
		{{- with $te := .}}
		{{- range $i := .Service.Methods}}
		{{- if ne $i.Name "Ping" }}
		{{$i.Name}}Endpoint: grpctransport.NewClient(
			conn,
			"{{$te.PackageName}}.{{$te.Service.Name}}",
			"{{$i.Name}}",
			EncodeGRPC{{$i.Name}}Request,
			DecodeGRPC{{$i.Name}}Response,
			{{GoName $i.ResponseType.Name}}{},
			options...,
		).Endpoint(),
		{{- end }}
		{{- end}}
		{{- end}}
	}
}


// 端点函数
{{- range $i := .Service.Methods}}
{{- if ne $i.Name "Ping" }}
func (e Endpoints) {{$i.Name}}(ctx context.Context, in *{{GoName $i.RequestType.Name}}) (*{{GoName $i.ResponseType.Name}}, error) {
	response, err := e.{{$i.Name}}Endpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*{{GoName $i.ResponseType.Name}}), nil
}
{{- end }}
{{- end}}

// 客户点响应解码函数
{{- range $i := .Service.Methods}}
{{- if ne $i.Name "Ping" }}
func DecodeGRPC{{$i.Name}}Response(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.{{GoName $i.ResponseType.Name}})
	return reply, nil
}
{{- end}}
{{- end}}

// 客户点请求编码函数
{{- range $i := .Service.Methods}}
{{- if ne $i.Name "Ping" }}
func EncodeGRPC{{$i.Name}}Request(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.{{GoName $i.RequestType.Name}})
	return req, nil
}
{{- end}}
{{- end}}